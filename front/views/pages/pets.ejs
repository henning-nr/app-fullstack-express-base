<!DOCTYPE html>
<html lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1.0"/>
  <title>Pet Management</title>

  <!-- CSS  -->
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css" type="text/css" rel="stylesheet" media="screen,projection"/>
</head>
<body>

  <div class="container">
    <h1><%=title%></h1>

    <form id="petForm">
        <input required type="hidden" name="id" id="id">
        <label for="name">Nome</label>
        <input required name="name" id="name" type="text"><br>
        <label for="race">Raça</label>
        <input required name="race" id="race" type="text"><br>
        <label for="colour">Cor</label>
        <input required name="colour" id="colour" type="text"><br>
        <label for="gender">Sexo</label>
        <input required name="gender" id="gender" type="text">
        <button type="submit" class="btn waves-effect waves-light">
            <i class="material-icons left">send</i> Enviar
        </button>
        <button type="reset" class="btn red waves-effect waves-light">
            <i class="material-icons left">cancel</i> Cancelar
        </button>
    </form>
    <span id="error"></span>

    <%if(error){%>
        <span>
            <%=JSON.stringify(error)%>
        </span>
    <%}%>

    <table class="striped">
        <thead>
            <tr>
                <%for(let col of cols){%>
                    <th><%=col%></th>
                <%}%>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            <%for(let pet of pets){%>
                <tr>
                    <%for(let prop in pet){%>
                        <td><%=pet[prop]%></td>
                    <%}%>
                    <td>
                        <button class="btn blue waves-effect waves-light" onclick="editPet('<%=pet.id%>')">
                            <i class="material-icons">edit</i>
                        </button>
                        <button class="btn red waves-effect waves-light" onclick="deletePet('<%=pet.id%>')">
                            <i class="material-icons">delete</i>
                        </button>
                    </td>
                </tr>
            <%}%>
        </tbody>
    </table>
  </div>

  <!--  Scripts-->
  <script src="https://code.jquery.com/jquery-2.1.1.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
  <script>
    const form = document.getElementById('petForm')
    form.addEventListener("submit", (e) => {
        e.preventDefault()
        const pet = mountDataForm()
        let id = pet.id
        let METHOD = id ? 'PUT' : 'POST';
        let URL = id ? `/pets/${id}` : '/pets';
        createOrUpdate(pet, URL, METHOD)
    })

    // CRIAR OU ATUALIZAR PET
    function createOrUpdate(pet, URL, METHOD) {
        console.log(pet)
        fetch(URL, {
            method: METHOD,
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(pet)
        })
        .then(async (res) => { return await checkError(res) })
        .then((pet) => {
            form.reset()
            window.location.reload()
        })
        .catch((error) => { document.getElementById('error').innerText = JSON.stringify(error) })
    }

    // BUSCAR PET A SER EDITADO PELO ID E CARREGAR NOS INPUTS DO FORM
    function editPet(id) {
        console.log(id)
        fetch("/pets/" + id, {
            method: "GET"
        })
        .then(async (res) => { return await checkError(res) })
        .then((pet) => {
            console.log('retornou o PET', pet)
            for (let prop in pet) {
                const input = document.querySelector(`input[name="${prop}"]`);
                if (input) {
                    input.value = pet[prop]
                }
            }
        })
        .catch((error) => { document.getElementById('error').innerText = JSON.stringify(error) })
    }

    // DELETAR UM PET PELO ID
    function deletePet(id) {
        fetch("/pets/" + id, {
            method: "DELETE"
        })
        .then(async (res) => { return await checkError(res) })
        .then((pet) => {
            window.location.reload()
        })
        .catch((error) => { document.getElementById('error').innerText = JSON.stringify(error) })
    }

    // CHECAR ERROS NA RESPOSTA DA REQUISIÇÃO
    async function checkError(res) {
        if (!res.ok) {
            const err = await res.json()
            throw err
        }
        return res.json()
    }

    // MONTAR DADOS DO FORMULÁRIO USANDO FORMDATA
    function mountDataForm() {
        const formData = new FormData(form)
        const pet = {}
        formData.forEach((v, k) => {
            pet[k] = v
        })
        console.log('Dados do formulário:', pet)
        return pet
    }
  </script>
</body>
</html>